import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as e,c as o,a,b as t,e as l,d as i}from"./app-e49854ab.js";const d={},p=i('<h1 id="对称加密算法" tabindex="-1"><a class="header-anchor" href="#对称加密算法" aria-hidden="true">#</a> 对称加密算法</h1><h2 id="des" tabindex="-1"><a class="header-anchor" href="#des" aria-hidden="true">#</a> DES</h2><p>Data Encryption Standard是上世纪70年代开始广泛采用的对称加密算法。</p><p>DES的加密过程是将64bit的明文用56bit的密钥加密生成64bit的密文，解密过程恰好相反。因为加密解密使用的是相同的密钥，所以称为“对称加密算法”。</p><p>在加密的过程中，明文会经历多次加密变成密文，每次称为“一轮”，下面详细地介绍一下过程。</p><ul><li><p>第一轮：输入64bit的明文，均分为左右两侧，各32bit。</p><p>右32bit发送至轮函数，轮函数根据右32bit和此轮的密钥来生成一个神秘的32bit数据</p><p>左32bit与刚刚生成的神秘32bit数据异或运算，作为输出的左侧</p><p>输入的右侧32bit不处理，直接作为输出右侧</p></li><li><p>后续的轮：对调输入的左右32bit数据，各轮分别使用新的密钥，与第一轮类似处理。</p></li><li><p>最后一轮：同之前的轮，输出后的结果不再对调，作为最终结果。</p></li></ul><p>这样就生成了密文，解密时，我们注意到对于单轮操作，把密文当成明文再进行一次加密，便可得到明文，那么对于DES，按照反过来的顺序对密文进行加密操作即可找回明文。</p><h2 id="三重des" tabindex="-1"><a class="header-anchor" href="#三重des" aria-hidden="true">#</a> 三重DES</h2><p>顾名思义，是由3次DES加密的步骤构成。</p><p>3DES的加密过程是：将明文使用3个DES加密的密钥进行这三次操作：</p><ul><li>使用密钥1对明文执行加密步骤，得到密文1</li><li>使用密钥2对密文1执行<strong>解密</strong>步骤，得到密文2</li><li>使用密钥3对密文2执行加密步骤，得到密文3</li><li>将密文3作为输出密文</li></ul><p>为什么不直接加密3次呢？这是为了对上面谈到的普通DES作兼容，当3个密钥相同时，3DES就退化为了DES，也就是说3DES兼容DES。</p><p>与DES相似，3DES解密过程和加密过程正好相反，密钥也都是之前的密钥。</p><p>‍</p><p>在人们的生产实践中，随着近来计算机技术的发展，由于DES密钥长度过短，很容易通过枚举的方式暴力破解，现在已经不再推荐使用。</p><h2 id="aes" tabindex="-1"><a class="header-anchor" href="#aes" aria-hidden="true">#</a> AES</h2><p>在DES无法满足现在的加密安全性要求时，AES诞生了，正如其名，A（Advance）即为“高级”的意思，那么高级在哪些地方呢？</p>',17),c={href:"https://en.wikipedia.org/wiki/Grover's_algorithm",target:"_blank",rel:"noopener noreferrer"},h={class:"MathJax",jax:"SVG",style:{position:"relative"}},Q={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.425ex",height:"2.758ex",role:"img",focusable:"false",viewBox:"0 -969 3282 1219","aria-hidden":"true"},m=i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msqrt" transform="translate(1152,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="mo" transform="translate(0,109)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="888" height="60" x="853" y="849"></rect></g><g data-mml-node="mo" transform="translate(2893,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1),g=[m],T=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mi",null,"O"),a("mo",{stretchy:"false"},"("),a("msqrt",null,[a("mi",null,"N")]),a("mo",{stretchy:"false"},")")])],-1),f={class:"MathJax",jax:"SVG",style:{position:"relative"}},u={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.495ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2429 1000","aria-hidden":"true"},b=i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1),_=[b],x=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mi",null,"O"),a("mo",{stretchy:"false"},"("),a("mi",null,"N"),a("mo",{stretchy:"false"},")")])],-1),C=i('<p>（不要觉得随机枚举很厉害，讨论这种问题，要认为大家都是天<s>气</s>弃之子，我不信你的运气一直都很好）</p><p>AES加密算法由密钥扩展和多轮加密两部分构成。此处暂时略去密钥扩展算法的过程。</p><p>多轮加密中会用到以下几种操作：</p><ul><li>AddRoundKey：单位明文和当前轮的密钥进行异或运算。</li><li>SubBytes：单位明文中的每一个字节都替换为表（即S盒）中对应的字节。</li><li>ShiftRows：单位明文的后三<em>行</em>以字节为单位进行循环移动，分别移动1次、2次和3次。</li><li>MixColumns：单位明文和给定的矩阵在Rijndael‘s Galois Field进行矩阵乘法。</li></ul><p>每一轮加密进行的操作如图所示：</p><figure><img src="https://static.someijam.cn/i/2023/09/02/64f35a50695c1.png" alt="AES加密过程(CryptoHack)" tabindex="0" loading="lazy"><figcaption>AES加密过程(CryptoHack)</figcaption></figure><p>以上就是AES对单位明文加密的操作流程。当然，每一步具体的细节比较复杂就不打算讲了，推荐一个网站https://formaestudio.com/rijndaelinspector/archivos/Rijndael_Animation_v4_eng-html5.html，这里生动形象地给大家讲了AES的加密过程，看完之后手写一个AES似乎也不难了。</p><h2 id="对明文的分组操作" tabindex="-1"><a class="header-anchor" href="#对明文的分组操作" aria-hidden="true">#</a> 对明文的分组操作</h2><p>当处理长消息时，需要把长消息进行分组，每组长度要等于单位明文（16B），对于由长消息产生的一大坨明文分组，我们有以下的操作进行加密。</p><h3 id="ecb" tabindex="-1"><a class="header-anchor" href="#ecb" aria-hidden="true">#</a> ECB：</h3><figure><img src="https://static.someijam.cn/i/2023/09/02/64f35a534c12f.png" alt="ECB Mode" tabindex="0" loading="lazy"><figcaption>ECB Mode</figcaption></figure><p>这种分组模式比较容易理解，一次加密一组明文，可以并行操作，效率很高。但是有个很致命的问题，也是各自独立加密的缺陷。假如对一张图片上像素数据进行加密，很有可能会加密成这个样子……</p><p><img src="https://static.someijam.cn/i/2023/09/02/64f35a5ceb232.jpg" alt="ECB示例1" title="ECB示例1" loading="lazy"><img src="https://static.someijam.cn/i/2023/09/02/64f35a5e53526.jpg" alt="示例1原图" title="示例1原图" loading="lazy"></p><p>加密成这样，相信大家都看出来原图画的是啥了，作为一名资深iKun这个问题显然不难回答。</p><p>也许还有同学不认识他，比如我，那再举一个例子吧：</p><figure><img src="https://static.someijam.cn/i/2023/09/02/64f35a62c9c1a.jpg" alt="ECB示例2" tabindex="0" loading="lazy"><figcaption>ECB示例2</figcaption></figure><figure><img src="https://static.someijam.cn/i/2023/09/02/64f35a569c6b6.png" alt="示例2原图" tabindex="0" loading="lazy"><figcaption>示例2原图</figcaption></figure><p>虽然被加密成这样，但是还是可以看出来是一个男孩子正在朝右边看，漏出来上半身，似乎还打着一把伞，上面的发型虽然模糊，但是还是很容易看得出来图片里的是森岛帆高（天<s>弃</s>气之子怎么能不认识？）。</p><p>上面举的例子图片色彩都比较丰富，但是如果是白底黑字写着flag的图片呢？大家可以自己尝试一下然后给其他人看看能不能看出flag是多少。</p><p>所以ECB分组加密由于各块独立加密的特点，对于图片这样有着很强整体特征的信息，加密后还是会暴露出不少信息的。</p><h3 id="cbc" tabindex="-1"><a class="header-anchor" href="#cbc" aria-hidden="true">#</a> CBC：</h3><figure><img src="https://static.someijam.cn/i/2023/09/02/64f35a569e46e.png" alt="CBC Mode" tabindex="0" loading="lazy"><figcaption>CBC Mode</figcaption></figure><p>对于CBC模式，我们可以看到，除了第一组是有一个初始向量（就是乱搓的16字节），后面所有的分组加密都依赖着前面组加密后的数据，这样，前面的内容就会被“扩散”到后面，影响后面的加密。这样的方式对于图片之类的信息而言，加密后就会变得难以辨认。比如上面森岛帆高的照片经过CBC模式的加密后就会变成这个样子：</p><figure><img src="https://static.someijam.cn/i/2023/09/02/64f35a67780d9.jpg" alt="CBC示例" tabindex="0" loading="lazy"><figcaption>CBC示例</figcaption></figure><p>看得出来，这已经算是把帆高“搅拌均匀了”，再也看不到一个人影。</p><p>当然这种方法最大的缺点就是慢，必须挨个挨个地加密。</p><blockquote><p>其实不知道大家发现没有，CBC的初始向量iv往往是已知的，知道了iv，我们可以发现如果任意修改第一组明文，但是iv配合得好，第一组可以产生和之前一样的密文。这其实是字节翻转攻击的一种简单形式，在某些需要用户加密Cookie传输到网页服务端时可以通过修改，让不是Admin的用户跟Admin用户产生相同的Cookie，进而伪装身份。</p></blockquote><h3 id="其他明文分组操作" tabindex="-1"><a class="header-anchor" href="#其他明文分组操作" aria-hidden="true">#</a> 其他明文分组操作</h3><p>除了ECB和CBC，常见的操作还有OFB、CTR和CFB。碍于篇幅这里只做一点简单介绍。</p><figure><img src="https://static.someijam.cn/i/2023/09/02/64f35a51bc982.png" alt="OFB Mode" tabindex="0" loading="lazy"><figcaption>OFB Mode</figcaption></figure><figure><img src="https://static.someijam.cn/i/2023/09/02/64f35a4f239ad.png" alt="CTR Mode" tabindex="0" loading="lazy"><figcaption>CTR Mode</figcaption></figure><p>OFB Mode将密钥进行一次次地加密，CTR Mode将“随机数+计数“用密钥加密，这样每一个明文分组都用上了不同的密钥。</p><p>仔细观察的话，这些模式其实都将之前的块加密模式变成了流密码模式。值得注意的是，这些加密都是“对称”的，此处的“对称”不是指对称密钥，而是将明文加密后得到密文，再将密文加密就会得到明文。所以如果攻击者手里有想破解的密文，此刻他又可以访问到加密机器的话……</p><p>‍</p>',34);function E(S,y){const n=r("ExternalLinkIcon");return e(),o("div",null,[p,a("p",null,[t("以AES-128为例，使用了128bit（16B）的密钥来加密单位明文（也是128bit，16B），密钥空间大大增加，现代计算机通过暴力枚举几乎覆盖不了多少。当然也具有一定的量子抗性，"),a("a",c,[t("Grover's algorithm"),l(n)]),t("可以用"),a("mjx-container",h,[(e(),o("svg",Q,g)),T]),t("的时间搜索"),a("mjx-container",f,[(e(),o("svg",u,_)),x]),t("级别的空间，所以未来的AES-256在这种情况下也可以提供到当前AES-128的安全性。")]),C])}const w=s(d,[["render",E],["__file","02-symmetrc-cryptography.html.vue"]]);export{w as default};
